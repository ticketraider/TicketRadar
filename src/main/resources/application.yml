auth:
  jwt:
    issuer: team.sparta.com
    secret: c5t6gzuXneIM3d0Eafy2F3MrkK41BUfD
    accessTokenExpirationHour: 12
cloud:
  aws:
    region:
      static: ap-northeast-2
    stack:
      auto: false
    credentials:
      access-key: ${AWS_ACCESS_KEY:dummy}
      secret-key: ${AWS_SECRET_KEY:dummy}
    s3:
      bucket: ticketraider-event
      dir: /ticketraider-event-image


spring:
  data:
    redis:
      host: 127.0.0.1
      port: 6379
  #      repositories:
  #        enabled: false
  #      password: ${REDIS_PASSWORD}
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            redirect-uri: https://api.ticketradar.net/oauth2/callback/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: kakao
            scope:
              - profile_nickname
              - account_email

          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: https://api.ticketradar.net/oauth2/callback/google
            client-name: google
            scope:
              - profile
              - email

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/oauth2/callback/naver
            authorization-grant-type: authorization_code
            client-name: naver
            scope:
              - nickname
              - email


        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token_uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user_name_attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response
---
spring:
  config:
    activate:
      on-profile: dev
  datasource:
    driver-class-name: org.postgresql.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      highlight_sql: true
      use_sql_comments: true
      default_batch_fetch_size: 500
      hibernate:
        format_sql: true
    open-in-view: false
#  h2:
#    console:
#      enabled: true
#      path: /h2-console
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:mem:test
#    username: sa
#    password:
#logging:
#  level:
#    org:
#      hibernate:
#        SQL: debug
#        orm:
#          jdbc:
#            bind: trace
#      springframework:
#        security: debug

#server:
#  port: 8081
---
spring:
  config:
    activate:
      on-profile: test
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      highlight_sql: true
      use_sql_comments: true
      default_batch_fetch_size: 500
      hibernate:
        format_sql: true
    open-in-view: false
    database-platform: org.hibernate.dialect.H2Dialect
#  datasource:
#    driver-class-name: org.h2.Driver
#    url: jdbc:h2:tcp://localhost/~/test
#    username: sa
#    password:

  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb  # 메모리 모드
    username: sa
    password:
  h2:
    console:
      enabled: true # 콘솔을 enable 해야 H2 콘솔에 접근할 수 있다.
      path: /h2-console
logging:
  level:
    org:
      hibernate:
        SQL: debug
        orm:
          jdbc:
            bind: trace
      springframework:
        security: debug